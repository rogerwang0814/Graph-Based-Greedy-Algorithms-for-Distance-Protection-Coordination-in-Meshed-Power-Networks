#include <bits/stdc++.h>
using namespace std;

struct dedge{
	int l,r;
	double val;
} es[200010];

vector<int> e[20010];
bool vis[20010],ban[20010],tban[20010];
vector<vector<int> > loops;
vector<int> add,exs;
int cnt[20010];

void dfsl(int pos,int rng){
	if (pos==rng && add.size()>0){
		if (add.size()>2){
			loops.push_back(add);
			exs.push_back(0);
		}
		return;
	}
	vis[pos]=1;
	if (add.size()>=8){
		vis[pos]=0;
		return;
	}
	for (auto x:e[pos]){
		if (es[x].r>=rng && (es[x].r==rng || !vis[es[x].r])){
			add.push_back(x);
			dfsl(es[x].r,rng);
			add.pop_back();
		}
	}
	vis[pos]=0;
	return;
}

void dfsr(int pos,int from){
	if (add.size()==7){
		loops.push_back(add);
		exs.push_back(0);
		return;
	}
	vis[pos]=1;
	for (auto x:e[pos]){
		if (!vis[es[x].r]){
			if (pos!=from) add.push_back(x);
			dfsr(es[x].r,from);
			if (pos!=from) add.pop_back();
		}
	}
	vis[pos]=0;
}

void dfsv(int pos,double vl,int from){
	if (vl<0.6) return;
	for (auto x:e[pos]){
		bool got=0;
		if ((from==-1 || x-1!=((from-1)^1)) && (es[x].val>vl || es[x].val==0) && !ban[x]){
			es[x].val=vl;got=1;
		}
		if (!ban[x] && got) dfsv(es[x].r,vl-0.2,x);
	}
}

vector<int> now;
int n,m;

signed main(){
	ios_base::sync_with_stdio(false);cin.tie(0);cout.tie(0);
	srand(time(NULL));
	cin>>n>>m;
	for (int i=1;i<=m;i++){
		int a,b;cin>>a>>b;
		e[a].push_back(i*2-1);e[b].push_back(i*2);
		es[i*2-1].l=a;es[i*2-1].r=b;es[i*2-1].val=0;
		es[i*2].r=a;es[i*2].l=b;es[i*2].val=0;
	}
	add.clear();
	for (int i=1;i<=n;i++){
		add.clear();
		for (int i=1;i<=n;i++) vis[i]=0;
		dfsl(i,i);
	}
	for (int i=1;i<=n;i++){
		add.clear();
		for (int i=1;i<=n;i++) vis[i]=0;
		dfsr(i,i);
	}
	int szl=loops.size();
	int mni=1e9;
	for (int z=1;z<=m*2;z++){
		int delct=0;
		now.clear();
		for (int i=0;i<szl;i++) exs[i]=0;
		for (int i=1;i<=m*2;i++) ban[i]=0;
		int dct=0;
		for (int i=1;i<=m*2;i++){
			cnt[i]=0;
		}
		for (int i=0;i<szl;i++){
			if (exs[i]==1) continue;
			for (auto y:loops[i]) if (!ban[y]) cnt[y]++;
		}
		while (delct<(int)loops.size()){
			int mx=0,ind=0;
			for (int i=1;i<=m*2;i++){
				if (ban[i]) continue;
				if (cnt[i]>mx){
					mx=cnt[i];
				}
			}
			int ct=0;
			for (int i=1;i<=m*2;i++){
				if (cnt[i]==mx) ct++;
			}
			int rt=rand()%ct+1;
			for (int i=1;i<=m*2;i++){
				if (cnt[i]==mx){
					rt--;
					if (rt==0){
						ind=i;break;
					}
				}
			}
			ban[ind]=1;
			dct++;
			for (int i=0;i<szl;i++){
				if (exs[i]==1) continue;
				bool k=exs[i];
				for (auto x:loops[i]){
					if (x==ind){
						exs[i]=1;delct++;break;
					}
				}
				if (exs[i]==1 && k==0){
					for (auto x:loops[i]) cnt[x]--;
				}
			}
		}
		if (dct<mni){
			for (int i=1;i<=m*2;i++) tban[i]=ban[i];
			mni=dct;
		}
	}
	for (int i=1;i<=m*2;i++) ban[i]=tban[i];
	int cnt=0;
	for (int i=1;i<=m*2;i++){
		if (ban[i]){
			cnt++;
			es[i].val=1.8;
		}
	}
	//return 0;
	//for (int i=1;i<=m*2;i++) if (ban[i]) cout<<es[i].l<<' '<<es[i].r<<"\n";
	for (int i=1;i<=m*2;i++){
		if (ban[i]){
			for (int j=1;j<=n;j++) vis[j]=0;
			//cout<<i<<' '<<es[i].l<<' '<<es[i].r<<"\n";
			dfsv(es[i].r,1.6,i);
			//for (int i=1;i<=m*2;i++){
			//	cout<<es[i].l<<' '<<es[i].r<<' '<<es[i].val<<"\n";
			//}
		}
	}
	//cout<<e[22].size()<<"\n";
	for (int i=1;i<=n;i++){
		for (int j=1;j<=n;j++) vis[j]=0;
		if (e[i].size()==1) dfsv(i,1.8,-1);
	}
	double mn=1e9;
	for (int j=1;j<=m*2;j++){
		mn=min(es[j].val,mn);
	}
	mn-=0.6;mn=max(0.0,mn);
	int nowc[3]={};
	for (int i=1;i<=m*2;i++){
		bool t0=0,t1=1;
		for (int j=1;j<=m*2;j++){
			if (es[j].r==es[i].l && es[j].l!=es[i].r){
				if (es[j].val>=es[i].val+0.1) t0=1;
				else t1=0;
			}
		}
		//cout<<i<<' '<<t0<<' '<<t1<<"\n";
		if (t0==1 && t1==1) nowc[0]++;
		else if (t0==1 && t1==0) nowc[1]++;
		else nowc[2]++;
	}
	cout<<nowc[0]<<' '<<nowc[1]<<' '<<nowc[2]<<"\n";
	for (int i=1;i<=m*2;i++){
		es[i].val-=mn;
		cout<<es[i].l<<' '<<es[i].r<<' '<<es[i].val<<"\n";
	}
}
